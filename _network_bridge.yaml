# This Docker Compose file can be used to quickly bootup Dgraph Zero
# and Alpha in different Docker containers.

# Data would be persisted to a Docker volume called db_data on the virtual machines.
# Run `docker-compose up` to start Dgraph.

# For ports usage, see: https://dgraph.io/docs/deploy/ports-usage/
# Check alpha state - http://localhost:8080/state
# Check alpha health - http://localhost:8080/health

version: "3.2"
services:
  zero:
    container_name: "dgraph-zero"
    image: dgraph/dgraph:v21.03-slash
    volumes:
      - db_data:/dgraph
    ports:
      - "5080:5080" # grpc port
      - "6080:6080" # http port
    networks:
      - dgraph
    restart: on-failure
    command: dgraph zero --my=zero:5080
  alpha:
    container_name: "dgraph-alpha"
    image: dgraph/dgraph:v21.03-slash
    volumes:
      - db_data:/dgraph
    ports:
      - "8080:8080" # http port
      - "7080:7080" # grpc port
      - "9080:9080" # grpc port
    networks:
      - dgraph
    restart: on-failure
    command: dgraph alpha --my=alpha:7080 --zero=zero:5080 --security "whitelist=0.0.0.0/0" --graphql "debug=true; extensions=true; introspection=true; lambda-url=http://127.0.0.1:8686/graphql-worker; poll-interval=1s;"
  lambda:
    container_name: "dgraph-lambda"
    image: dgraph/dgraph-lambda:latest
    ports:
      - "8686"
    environment:
      DGRAPH_URL: http://127.0.0.1:8080
    volumes:
      - ./gql/dist/script.js:/app/script/script.js:ro
  ratel:
    container_name: "dgraph-ratel"
    image: dgraph/ratel:latest
    ports:
      - "8000:8000"
    restart: on-failure
    command: dgraph-ratel -addr=alpha:8080

volumes:
  db_data:

networks:
  dgraph:
    driver: bridge
